generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

/// @@allow('read', auth() != null)
/// @@allow('create', auth().role.id in ['admin', 'accountant'])
model Invoice {
  id         String   @id @unique @default(cuid())
  customer   String
  issue_date DateTime @default(now())
  due_date   DateTime
  item       String
  comment    String
  price      Float

  @@index([customer])
}

/// @@allow('read', auth() != null)
model Role {
  id          String  @id @unique
  name        String
  description String?
  users       User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@deny('create', roleId == 'admin')
/// @@allow('create', true)
/// @@allow('read', auth() == this || auth().role.id == 'admin')
/// @@allow('delete', auth() == this)
/// @@allow('update', auth() == this)
model User {
  /// @deny('update', true)
  id         String    @id @default(cuid())
  /// @deny('update', true)
  name       String
  /// @deny('update', true)
  username   String    @unique
  last_login DateTime? @default(now())
  /// @password
  /// @omit
  password   String
  /// @deny('update', auth().role.id != 'admin')
  roleId     String
  accounts   Account[]
  sessions   Session[]
  role       Role      @relation(fields: [roleId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
